<?xml version="1.0" encoding="utf-8"?>
<model about="urn:negotiate.limsi.fr:Example"
       xmlns="http://www.cs.wpi.edu/~rich/d4g"
       xmlns:disco="urn:disco.wpi.edu:Disco"
       xmlns:n="urn:negotiate.limsi.fr:Negotiate"
       xmlns:t="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">


<t:task id="GoingOut">
	<t:subtasks id="talk">
		<t:step name="intro" task="InviteOut"/>
	</t:subtasks>
</t:task>

<t:task id="Trees">
  <t:subtasks id="askC">
    <t:step name="ask" task="AskCriterion"/>
    <t:applicable> !isDom() </t:applicable>
  </t:subtasks>
  <t:subtasks id="proposeC">
    <t:step name="propose" task="ProposeCriterion"/>
    <t:applicable> isDom() </t:applicable>
  </t:subtasks>
</t:task>

<agent id="InviteOut" text="Would you like to go out with me on the town tonight?">
	<user text="That would be great ! .">
		<do task="InviteToDinner"/>
	</user>
		<user text="Sorry, not today">
			<do task="ClosingDialogue"/>
	</user>
</agent>

<agent id="InviteToDinner" text="Would you enjoy having dinner with me?">
	<user text="yes.">
		<do task="Trees"/>
	</user>
</agent> 

<agent id="ClosingDialogue" text="No problem, another day maybe">
	<user text="Sure !."/>
	<user text="yeah, I'll call you tommorow."/>
</agent>

<agent id="ClosingNegotiation" text="Sorry, but I no longer want to go for dinner. You rejected all the restaurants that I like">
	<user text="Too bad."/>
	<user text="No problem."/>
</agent>

<agent id="Booking" text="Okay, I'll call to book a table">
	<user text="Perfect!"/>
</agent> 

<do id="AskCriterion" actor = "agent"  task="n:fr.limsi.negotiate.lang.AskPreference"
		criterion ="$mostPrefCriterion" less="null"	more="null" 
		 applicable = "!isDom()">       
	<do task = "State"/>
    <do task = "Propose"/>
   	<do task = "Ask"/>
   	<do task = "Accept"/>
   	<do task = "Reject"/>      
</do>

<do id="ProposeCriterion"  actor = "agent"  task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="proposalFromPreference(getLastUserPref()) "
		applicable = "isDom()">       
	<do task = "State"/>
    <do task = "Propose"/>
   	<do task = "Ask"/>
   	<do task = "Accept"/>
   	<do task = "Reject"/>      
</do>

<!-- User State Preference -->
<do id = "State" actor="user" task="n:fr.limsi.negotiate.lang.StatePreference">

	<do actor="agent" task = "ClosingNegotiation" 
		applicable = "$negotiation.negotiationFailure(dom)" />
		
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="proposalFromPreference(getLastUserPref()) "
		applicable = "proposalFromUserState(getLastUserPref())">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
		less="reactUser($state).getLess()" more="reactUser($state).getMore()" 
		applicable = "!sameStatement($state)">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>        	
	</do>		

	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference" 
		less="getPreference(getDiscussedCriterion()).getLess()" 
		more="getPreference(getDiscussedCriterion()).getMore()" applicable = "!isSub()"> 
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>

	<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference" criterion ="null"
		less="askUserPref(getDiscussedCriterion()).getLess()"
		more="askUserPref(getDiscussedCriterion()).getMore()" 
		applicable = "!isDom()">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>        
	</do>		

</do>


<do id = "Ask" actor="user" task="n:fr.limsi.negotiate.lang.AskPreference">

	<do actor="agent" task = "ClosingNegotiation" 
		applicable = "$negotiation.negotiationFailure(dom)" />
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
		less="reactUser($ask).getLess()" more="reactUser($ask).getMore()">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>

</do>


<do id = "Propose" actor="user" task="n:fr.limsi.negotiate.lang.Propose"> 

	<do actor="agent" task = "ClosingDialogue" 
		applicable = "$negotiation.negotiationFailure(dom)" />
	
	<!--Ajouter une condition qui vÃ©rifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC	 -->
	<do actor="agent" task ="Booking"
		applicable ="isOptionProposal(lastOpenProposal())  &amp;&amp; isAcceptable(lastOpenProposal(), dom)" 
	/>
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Accept" 
		proposal="lastOpenProposal()"
		applicable = "isAcceptable(lastOpenProposal(), dom)">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do> 
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="getRandCriterionProp(getDiscussedCriterion())" 
		applicable = "isDom() &amp;&amp; !isAcceptable(lastOpenProposal(), dom)">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do> 
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="getRandOptionProp()"
		applicable = "isDom() &amp;&amp; !isAcceptable(lastOpenProposal(), dom)" >
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Reject" 
		proposal="lastOpenProposal()"  
		applicable = "!(isSub() &amp;&amp; isAcceptable(lastOpenProposal(), dom))">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do> 

	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
		less="reactToRejectedProp(lastOpenProposal()).getLess()" 
		more="reactToRejectedProp(lastOpenProposal()).getMore()" 
		applicable = "isSub() &amp;&amp; !isAcceptable(lastOpenProposal(), dom)">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	

</do>

<do id = "Accept" actor="user" task="n:fr.limsi.negotiate.lang.Accept">
	
	<do actor="agent" task = "ClosingNegotiation" 
		applicable = "$negotiation.negotiationFailure(dom)" />
	
	<do actor="agent" task ="Booking"
		applicable ="isOptionProposal(lastAcceptedProposal())"/>
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="createOptionProposal($negotiation.computeAcceptedOption())"
		applicable = "isSub() &amp;&amp; $negotiation.allCriteriaAccepted()" >
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do> 
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="createOptionProposal(getOptionWithValue(lastAcceptedProposal().getValue()))"
		applicable = "!isSub() &amp;&amp; isCriterionProposal(lastAcceptedProposal())" >
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do> 
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
		less="getPreference(openNewCriterion()).getLess()" 
		more="getPreference(openNewCriterion()).getMore()" applicable = "isPeer()">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>


	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="createCriterionProposal(currentMostPreferred(openNewCriterion()))"
		applicable = "isDom()" >
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do> 

	<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
		criterion ="null"
		less="askUserPref(openNewCriterion()).getLess()" 
		more="askUserPref(openNewCriterion()).getMore()" applicable = "isSub()">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	
</do>


<do id = "Reject" actor="user" task="n:fr.limsi.negotiate.lang.Reject">
<!--In the case where the agent is very dominant propose again the the proposal if it is the mostPref proposal -->
	<do actor="agent" task = "ClosingNegotiation" 
		applicable = "$negotiation.negotiationFailure(dom)" />
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="lastRejectedProposal() "
		applicable = " isMostPrefProposal(lastRejectedProposal()) &amp;&amp; isDom()" >
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	<!-- In the case where an option is rejected open a new Criterion   -->
	<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
		criterion ="null"
		less="askUserPref(openNewCriterion()).getLess()" 
		more="askUserPref(openNewCriterion()).getMore()"
		applicable ="!isDom()&amp;&amp; isOptionProposal(lastRejectedProposal())">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	
	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
		less="askUserPref(openNewCriterion()).getLess()" 
		more="askUserPref(openNewCriterion()).getMore()"
		applicable ="isDom()&amp;&amp; isOptionProposal(lastRejectedProposal())">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	<!-- 											  -->
	
	<!-- Ask(other preference)   -->
	<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
		criterion ="null"
		less="askUserPref(getDiscussedCriterion()).getLess()" 
		more="askUserPref(getDiscussedCriterion()).getMore()"
		applicable ="isSub()">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>
	
	<!-- state(other preference)  -->  
	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
		less="getPreference(getDiscussedCriterion()).getLess()" 
		more="getPreference(getDiscussedCriterion()).getMore()"
		applicable = "isPeer()">
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>

	<!--       	Ajouter une condition qui vÃ©rifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC	 -->
	<!--       	Propose(other proposal)  -->
	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="getRandCriterionProp(getDiscussedCriterion())"
		applicable = "!isSub()" >
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do> 

	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
		proposal="getRandOptionProp()"
		applicable = "!isSub()" >
		<do task = "Ask"/>
		<do task = "State"/>
		<do task = "Propose"/>
		<do task = "Accept"/>
		<do task = "Reject"/>
	</do>     
	 	
</do>
 
<t:script init="true">

    var APPLICABLE_TEST = null; // for testing
    var dom = 0;
    $state ="State";
    $ask ="Ask";
    $negotiation = $disco.getInteraction().getSystem().getNegotiation();
    $ambiance = Packages.fr.limsi.negotiate.restaurant.Ambiance.class ;
    $cuisine = Packages.fr.limsi.negotiate.restaurant.Cuisine.class ;
    $mostPrefCriterion = $negotiation.criteriaPreferences.getMostPreferred();
    $leastPrefCriterion = $negotiation.criteriaPreferences.getLeastPreferred();
    

    function currentMostPreferred(criterion) {
       return ($negotiation.currentMostPreferredCriterion(criterion));
    }
    function mostPreferredCriterion(criterion){
    	return ($negotiation.mostPreferredCriterion(criterion));
    }
    
    function currentMostPreferredOption() {
       return ($negotiation.currentMostPreferredOption());
    }
    function mostPreferredOption(){
    	return ($negotiation.mostPreferredOption());
    }
    
    function isMostPrefProposal(proposal){
    	if(isCriterionProposal(proposal))
    		return(mostPreferredCriterion(proposal.getValue().getClass()).equals(proposal.getValue()));
		if(isOptionProposal(proposal))
    		return(mostPreferredOption().equals(proposal.getValue()));
    }   
    
    function Preferred(criterion) {   
       		return (Packages.fr.limsi.negotiate.restaurant.Cuisine.ITALIAN);  		
    }
    
    function getLastUserPref() { 
    	if (getLastUserStatement("State") !=null)
    		return (getLastUserStatement("State").getStatedPreference());
    	
    	else 
    		return getPreference($cuisine);
    }
    
    function proposalFromUserState(){
    	more = getLastUserPref().getMore();
    	less = getLastUserPref().getLess();
    	mostPref = currentMostPreferred(getDiscussedCriterion());
    	if(more!= null){
    		if(isSub())
    			return true;
    		
    		if (!isSub() &amp;&amp; isAcceptable(createProposal(more)))
    			return true;
    	}
    	return false;  	
    }
    
    
    function getLastUserStatement(uttType){
		return $negotiation.context.getLastStatement(uttType, true);
	}
	
	 function getLastAgentStatement(uttType){
		return $negotiation.context.getLastStatement(uttType, false);
	}
	
	 function reactUser(uttType){
    	return($negotiation.reactUserStatement(uttType));
    }
 
 	
	function isCriterionProposal(proposal){
	
		return(proposal.class.equals(Packages.fr.limsi.negotiate.CriterionProposal.class));
	}
	
	function isOptionProposal(proposal){
		return(proposal.class.equals(Packages.fr.limsi.negotiate.OptionProposal.class));
	}
    
    function getPreference(criterion){
		return ($negotiation.getRandomPreference(criterion));
	}
	
	function sameStatement(uttType){
		 $agent  = getLastAgentStatement(uttType);
		 $user  = getLastUserStatement(uttType);
	
		if ($user == null ||  $agent == null)
			return false;
					
		if($agent.getStatedPreference().getMore() == null)
			return ($agent.getStatedPreference().getLess() == $user.getStatedPreference().getLess() 
				|| $agent.getStatedPreference().getLess() == $user.getStatedPreference().getMore()) ;
		
		if($agent.getStatedPreference().getLess() == null)
			return ($agent.getStatedPreference().getMore() == $user.getStatedPreference().getLess() 
				|| $agent.getStatedPreference().getMore() == $user.getStatedPreference().getMore()) ;
		
		if($user.getStatedPreference().getMore() == null)
			return ($user.getStatedPreference().getLess() == $agent.getStatedPreference().getLess() 
				|| $user.getStatedPreference().getLess() == $agent.getStatedPreference().getMore()) ;
		
		if($user.getStatedPreference().getLess() == null)
			return ($user.getStatedPreference().getMore() == $agent.getStatedPreference().getLess() 
				|| $user.getStatedPreference().getMore() == $agent.getStatedPreference().getMore()) ;
		
		 
		return($agent.equals($user));
	}

	function askUserPref(criterion){
		return ($negotiation.askUserPreference(criterion));
	}
	
	
	function createProposal(criterion) {
	// Enlever le  il doit etre uniquement specifier dans la maj de l'etat mental
		if(criterion == null)
			return null;
		return $negotiation.criterionProposal(criterion);
	}
	
	function proposalFromPreference(preference) {
			if (preference == null)
				return null;
			else 	{
				return createCriterionProposal(preference.getMore());
			}	
				
	}
	
	function createCriterionProposal(criterion) {
			if (criterion == null)
				return null;
			else 	{
				return $negotiation.criterionProposal(criterion);
			}	
				
	}
	
	function createOptionProposal(option) {
		return $negotiation.optionProposal(option);
	}
	
	function getDiscussedCriterion(){
		return $negotiation.context.getCurrentDiscussedCriterion();
	}
		
	function lastRejectedProposal (){
		return ($negotiation.context.getLastProposal("REJECTED"));
	}
	
	function lastOpenProposal (){
		return ($negotiation.context.getLastProposal("OPEN"));	
	}
	
	function lastAcceptedProposal(){
			if($negotiation.context.getLastProposal("ACCEPTED")!=null)
				return ($negotiation.context.getLastProposal("ACCEPTED"));
			else
				return createCriterionProposal($more);
	}
	
	function getOptionWithValue(criterion){

		return $negotiation.getOptionWithValue(criterion);
	}
	
	// returns a new Critetion class  to discuss {cuisine, ambiance, cost}
	function openNewCriterion(){
		topic = $negotiation.openNewTopic();
		if(topic == null)	
			return $negotiation.criteriaPreferences.getValues().get(0);
		else 
			return topic; 
	}
	
	function getRandCriterionProp(criterion){
		return ($negotiation.generateRandomCriterionProposal(criterion));
	}
	
	function getRandOptionProp(){
		return ($negotiation.generateRandomOptionProposal());
	}
	
	function reactToProposal(proposal){
		if (proposal != null)
			return ($negotiation.reactToProposal(proposal));
		else
			return getPreference($cuisine);
	}
	
	function isAcceptable(proposal, dom){
		return $negotiation.isAcceptable(proposal, dom);
	}
	
	function reactToRejectedProp(proposal){
		return $negotiation.reactToRejectedProp(proposal);
	}
	
	function isDom(){
		return(dom > 0)
	}
	
	function isPeer(){
		//print("ISPEER"); // pourquoi il affiche Ã§a 4 fois quand il passe dans le 1er State ?
		return(dom==0)
	}
	
	function isSub(){
		return (dom &lt; 0)
	}      
 
</t:script>
  
</model>
