<?xml version="1.0" encoding="utf-8"?>
<model about="urn:negotiate.limsi.fr:Example"
       xmlns="http://www.cs.wpi.edu/~rich/d4g"
       xmlns:disco="urn:disco.wpi.edu:Disco"
       xmlns:n="urn:negotiate.limsi.fr:Negotiate"
       xmlns:t="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">


  <agent id="trees" text="What type of cuisine do you prefer?">

  <!-- this branch is chosen when user says anything else -->
         
			<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Ask"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
         
  </agent>
  
  <!-- User State Preference -->
    <do id = "State" actor="user" task="n:fr.limsi.negotiate.lang.StatePreference">
       	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
        	less="reactUser($state).getLess()" more="reactUser($state).getMore()" applicable = "isPeer()">
        	<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>        	

       	</do>		
     	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference" 
			less="getPreference(getDiscussedCriterion()).getLess()" 
			more="getPreference(getDiscussedCriterion()).getMore()" applicable = "isDom()"> 
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getLastUserPref()) " applicable = "isSub()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 

		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" 
			more="askUserPref(getDiscussedCriterion()).getMore()" applicable = "!isDom()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
    </do>
   
   
   
    
	<do id = "Ask" actor="user" task="n:fr.limsi.negotiate.lang.AskPreference">
       	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
        	less="reactUser($ask).getLess()" more="reactUser($ask).getMore()" applicable = "isPeer()">
        	<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
       			
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getLastUserPref())" applicable = "isSub()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 

		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference" 
			less="askUserPref(getDiscussedCriterion()).getLess()" 
			more="askUserPref(getDiscussedCriterion()).getMore()" applicable = "isDom()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
	</do>



	
	<do id = "Accept" actor="user" task="n:fr.limsi.negotiate.lang.Accept">

      	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       		less="getPreference(getDiscussedCriterion()).getLess()" 
       		more="getPreference(getDiscussedCriterion()).getMore()" applicable = "isPeer()">
       		<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
      	
      	<!-- Ajouter une condition qui vérifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC-->	
      		
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getLastUserPref())" >
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 
	
		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" 
			more="askUserPref(getDiscussedCriterion()).getMore()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
	</do>




	<do id = "Reject" actor="user" task="n:fr.limsi.negotiate.lang.Reject">
	
		<!-- state(other preference)  -->
      	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
	       	less="getPreference(getDiscussedCriterion()).getLess()" 
	       	more="getPreference(getDiscussedCriterion()).getMore()" applicable = "isPeer()">
       		<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
      	
      	<!-- Ajouter une condition qui vérifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC-->	
      	<!-- Propose(other proposal)  -->
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="generateRandomProposal(getDiscussedCriterion())" >
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 
		<!-- Ask(other preference)  -->
		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" 
			more="askUserPref(getDiscussedCriterion()).getMore()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
		<!-- state(preference) of the proposal  -->
		<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       	less="reactToProposal(lastRejectedProposal()).getMore()" 
       	more="reactToProposal(lastRejectedProposal()).getLess()" applicable = "isPeer()">
      		<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
      	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="lastRejectedProposal()" > 
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
	</do>


	
	
 	<do id = "Propose" actor="user" task="n:fr.limsi.negotiate.lang.Propose"> 
	
		<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       		less="reactToProposal(lastOpenProposal()).getLess()" 
       		more="reactToProposal(lastOpenProposal()).getMore()" applicable = "isSub()">
       		<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
      	

      	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       		less="getPreference(getDiscussedCriterion()).getLess()" 
       		more="getPreference(getDiscussedCriterion()).getMore()" applicable = "isPeer()">
       	<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
      	
      	<!-- Ajouter une condition qui vérifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC-->	
      		
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="generateRandomProposal(getDiscussedCriterion())"  applicable = "isDom()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 
	
		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" 
			more="askUserPref(getDiscussedCriterion()).getMore()" >
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
		
		
      	<do actor="agent" task="n:fr.limsi.negotiate.lang.Accept" 
			proposal="lastOpenProposal()" >
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 
			
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Reject" 
			proposal="lastOpenProposal()" >
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 
	
	</do>
  <t:script init="true">

    var APPLICABLE_TEST = null; // for testing
    var dom = 0;
    $state ="State";
    $ask ="Ask";
    $negotiation = $disco.getInteraction().getSystem().getNegotiation();
    $ambiance = Packages.fr.limsi.negotiate.restaurant.Ambiance.class ;
    $cuisine = Packages.fr.limsi.negotiate.restaurant.Cuisine.class ;
    $less = Packages.fr.limsi.negotiate.restaurant.Cuisine.ITALIAN;
    $more = Packages.fr.limsi.negotiate.restaurant.Cuisine.CHINESE;
    $lastProposal = null;

    function mostPreferredCuisine() {
       return (Packages.fr.limsi.negotiate.restaurant.Cuisine.ITALIAN);
    }
    
    function leastPreferredCuisine () {   
       		return (Packages.fr.limsi.negotiate.restaurant.Cuisine.ITALIAN);  		
    }
    
    function getLastUserPref() { 
    	if (getLastUserStatement("State") !=null)
    		return (getLastUserStatement("State").getStatedPreference());
    	
    	else 
    		return null;
    }
    
    function getLastUserStatement(uttType){
		return $negotiation.context.getLastStatement(uttType, true);
	}
	
	 function getLastAgentStatement(uttType){
		return $negotiation.context.getLastStatement(uttType, false);
	}
	
	 function reactUser(uttType){
    	return($negotiation.reactUserStatement(uttType));
    }
 
 	function lastOpenProposal(){
	
		return $lastProposal;
	}
	
	function updateProposal(proposal){
		$lastProposal = proposal;
	}
    
    function getPreference(criterion){
		return ($negotiation.getRandomPreference(criterion));
	}
	
	function sameStatement(uttType){
		if (getLastUserStatement(uttType) == null ||  getLastAgentStatement (uttType) == null)
			return false;		
		return(getLastAgentStatement(uttType).equals(getLastUserStatement(uttType)));
	}

	function askUserPref(criterion){
		return ($negotiation.askUserPreference(criterion));
	}
	
	
	function createProposal(criterion) {
	// Enlever le  il doit etre uniquement specifier dans la maj de l'etat mental
		if(criterion == null)
			return null;
		return $negotiation.criterionProposal(criterion);
	}
	
	function createCriterionProposal(preference) {
			if (preference == null)
				return null;
			else 		
				return $negotiation.criterionProposal(preference.getMore());
	}
	
	function createOptionProposal(option) {
		return $negotiation.optionProposal(option);
	}
	
	
	
	function getDiscussedCriterion(){
		return $negotiation.context.getDiscussedCriterion();
	}
		
	function lastRejectedProposal (){
		return ($negotiation.context.getLastProposal("REJECTED"));
	}
	
	function lastOpenProposal (){
		return ($negotiation.context.getLastProposal("OPEN"));
		
	}
	
	function lastAcceptedCriterion(){
			return ($negotiation.context.getLastProposal("ACCEPTED"));
	
	}
	
	function generateRandomProposal(criterion){
		return ($negotiation.generateRandomProposal(criterion));
	}
	
	function reactToProposal(proposal){
		if (proposal != null)
			return ($negotiation.reactToProposal(proposal));
		else
			return getPreference($cuisine);
	}
	
	function reactToAsk() {
		
	}
	
	function isDom(){
		return(dom > 0)
	}
	
	function isPeer(){
		return(dom==0)
	}
	
	function isSub(){
		if(!isDom()){
			if(!isPeer())
				return true;
		}
		return false;
	
	}      
    
  </t:script>
  
</model>
