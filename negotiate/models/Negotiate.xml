<taskModel about="urn:negotiate.limsi.fr:Negotiate"
	xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">


	<!-- This file contains the definitions for the utterance types used in 
		the negotiation model. See Negotiate.properties for glossing. -->

	<!-- see Java class definition for StatePreference -->



	<task id="fr.limsi.negotiate.lang.StatePreference">
		<!-- NOTE: * null value for either input means the other input is preferred 
			to _all_ other possible criteria in that category * at most one input may 
			have null value * null value for slot is _not_ the same as being undefined, 
			see Task.isDefinedSlot(String) -->
		<input name="less" type="Packages.fr.limsi.negotiate.Criterion" />
		<input name="more" type="Packages.fr.limsi.negotiate.Criterion" />


		<script>
			$negotiation.context.updateDiscussedCriterion($this.less,$this.more);
			if ( $this.external ) {
				updateOtherMS ($this.less, $this.more);
			} 
			else {
				updateOtherAboutSelfMS ($this.less, $this.more);
			}
		</script>
	</task>


	<task id="fr.limsi.negotiate.lang.AskPreference">

		<!-- Note: The 'criterion' input below is to support asking about a criterion 
			in general, i.e., with both the 'less' and 'more' inputs null. The value 
			provided should be Java class object (which is technically a function in 
			JavaScript) that is a subtype of fr.limsi.negotiate.Criterion and the values 
			provided for 'less' and 'more', if non-null, should be instances of this 
			class. The criterion input itself is not optional. -->

		<input name="criterion" type="function" />
		<input name="less" type="Packages.fr.limsi.negotiate.Criterion" />
		<input name="more" type="Packages.fr.limsi.negotiate.Criterion" />

		<precondition>
			!($negotiation.isInOther($this.less, $this.more) ||
			$negotiation.isInOther($this.more, $this.less))
		</precondition>
		
		<script>
			
			$statement = createStatement($this.less, $this.more, $this.external,"Ask");
			
			if($this.criterion == null)
				$negotiation.context.updateDiscussedCriterion($this.less,$this.more);
				
			else {
				$negotiation.context.updateDiscussedCriterion($this.criterion.class);
				$statement.setType($this.criterion.class)		
				}
			$negotiation.context.getListStatements().add($statement);
					
		</script>

	</task>


	<task id="fr.limsi.negotiate.lang.Propose">

		<input name="proposal" type="Packages.fr.limsi.negotiate.Proposal" />

		<precondition>
			! isProposed ($this.proposal,
			Packages.fr.limsi.negotiate.Proposal.Status.OPEN)
		</precondition>

		<script>
			$this.proposal.setIsSelf(!$this.external);
			propose ($this.proposal);
			$lastProposal = ($this.proposal);
			$negotiation.context.updateDiscussedCriterion($this.proposal.getValue().getClass());
		</script>

	</task>


	<task id="fr.limsi.negotiate.lang.Accept">

		<input name="proposal" type="Packages.fr.limsi.negotiate.Proposal" />

		<precondition>
			isProposed ($this.proposal,
			Packages.fr.limsi.negotiate.Proposal.Status.OPEN);
		</precondition>

		<script>
			accept($this.proposal);

		</script>

	</task>


	<task id="fr.limsi.negotiate.lang.Reject">

		<input name="proposal" type="Packages.fr.limsi.negotiate.Proposal" />

		<precondition>
			isProposed ($this.proposal,
			Packages.fr.limsi.negotiate.Proposal.Status.OPEN);
		</precondition>

		<script>

			reject($this.proposal);

		</script>

	</task>

	<!-- TODO: add similar definitions for other utterance types -->

	<script init="true">

		var STATE_PREFERENCE_TEST = null;
		$negotiation = 	$disco.getInteraction().getSystem().getNegotiation();
		$lastProposal = null;

		function updateOtherMS (less, more){
		$negotiation.updateOtherMentalState(less, more);
		}

		function updateOtherAboutSelfMS (less, more){
		$negotiation.updateOASMentalState(less, more);
		}

		function isProposed	(proposal, status) {
		return $negotiation.isProposed(proposal, status);
		}

		function propose (proposal){
		$negotiation.addProposal(proposal);
		}

		function getStatus (proposal) {
		return $negotiation.checkProposalStatus(proposal);
		}

		function accept(value){
		$negotiation.updateProposalStatus(value,
		Packages.fr.limsi.negotiate.Proposal.Status.ACCEPTED);
		}

		function reject(value){
		$negotiation.updateProposalStatus(value,
		Packages.fr.limsi.negotiate.Proposal.Status.REJECTED);
		}
		
		function mostPreferredValue(criterion) {
		return $negotiation.mostPreferredCriterion(criterion);
		}

		function printMS() {
		return $negotiation.printAllMentalState();
		}
		
		function getDiscussedCriterion(){
			return $negotiation.context.getDiscussedCriterion();
		}
		
		function createStatement (less, more, external,utteranceType){
			return ($negotiation.context.createstatement(less, more, external,utteranceType));
		}
		
		
	</script>

</taskModel>
 
