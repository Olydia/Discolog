<?xml version="1.0" encoding="utf-8"?>
<model about="urn:negotiate.limsi.fr:Example"
       xmlns="http://www.cs.wpi.edu/~rich/d4g"
       xmlns:disco="urn:disco.wpi.edu:Disco"
       xmlns:n="urn:negotiate.limsi.fr:Negotiate"
       xmlns:t="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">


  <agent id="_another_example" text="What cuisine do you prefer?">

  <!-- this branch is chosen when user says anything else -->
         
		<do task = "State"/>
         
  </agent>
  
    <do id = "State" actor="user" task="n:fr.limsi.negotiate.lang.StatePreference">
       	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
        	less="reactUser().getLess()" more="reactUser().getMore()" >
        	<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>		
     	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference" 
			less="getPreference(getDiscussedCriterion()).getLess()" more="getPreference(getDiscussedCriterion()).getMore()" applicable = "dom > 0">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 

		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getLastUserPref(), false)"> 
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>

		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" more="askUserPref(getDiscussedCriterion()).getMore()">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
    </do>
    
	<do id = "Ask" actor="user" task="n:fr.limsi.negotiate.lang.AskPreference">
       	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
        	less="reactUser().getLess()" more="reactUser().getMore()" applicable = "dom > 0">
        	<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do>
       			
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getLastUserPref(), false)">
			<do task = "Ask"/>
        	<do task = "State"/>
        	<do task = "Propose"/>
        	<do task = "Accept"/>
        	<do task = "Reject"/>
       	</do> 

		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" more="askUserPref(getDiscussedCriterion()).getMore()"/>
	</do>
	
	<do id = "Accept" actor="user" task="n:fr.limsi.negotiate.lang.Accept">

      	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       	less="getPreference(getDiscussedCriterion()).getLess()" more="getPreference(getDiscussedCriterion()).getMore()" applicable = "dom = 0"/>
      	
      	<!-- Ajouter une condition qui vérifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC-->	
      		
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getLastUserPref(), false)" /> 
	
		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" more="askUserPref(getDiscussedCriterion()).getMore()"/>
	</do>


	<do id = "Reject" actor="user" task="n:fr.limsi.negotiate.lang.Reject">

      	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       	less="getPreference(getDiscussedCriterion()).getLess()" more="getPreference(getDiscussedCriterion()).getMore()" applicable = "dom = 0"/>
      	
      	<!-- Ajouter une condition qui vérifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC-->	
      		
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getPreference(getDiscussedCriterion()).getMore(), false)" /> 
	
		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" more="askUserPref(getDiscussedCriterion()).getMore()"/>
		
		<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       	less="getPreference(lastRejectedProposal().getValue()).getLess()" more="getPreference(lastRejectedProposal().getValue()).getMore()" applicable = "dom = 0"/>
      	
      	<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="lastRejectedProposal()" /> 
	</do>
	
	
	<do id = "Propose" actor="user" task="n:fr.limsi.negotiate.lang.Propose">
	
		<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       		less="getPreference(lastOpenProposal().getValue()).getLess()" more="getPreference(lastOpenProposal().getValue()).getMore()" applicable = "dom = 0"/>
      	

      	<do actor="agent" task="n:fr.limsi.negotiate.lang.StatePreference"
       	less="getPreference(getDiscussedCriterion()).getLess()" more="getPreference(getDiscussedCriterion()).getMore()" applicable = "dom = 0"/>
      	
      	<!-- Ajouter une condition qui vérifie que la proposition doit etre diff de actuel et statut diff de Rej ou ACC-->	
      		
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Propose" 
			proposal="createCriterionProposal(getPreference(getDiscussedCriterion()).getMore(), false)" /> 
	
		<do actor="agent" task="n:fr.limsi.negotiate.lang.AskPreference"
			less="askUserPref(getDiscussedCriterion()).getLess()" more="askUserPref(getDiscussedCriterion()).getMore()"/>
		
		
      	<do actor="agent" task="n:fr.limsi.negotiate.lang.Accept" 
			proposal="lastOpenProposal()" /> 
			
		<do actor="agent" task="n:fr.limsi.negotiate.lang.Reject" 
			proposal="lastOpenProposal()" /> 
	
	</do>
  <t:script init="true">

    var APPLICABLE_TEST = null; // for testing
    var dom = 3;
    $negotiation = $disco.getInteraction().getSystem().getNegotiation();
    $ambiance = Packages.fr.limsi.negotiate.restaurant.Ambiance.class ;
    $cuisine = Packages.fr.limsi.negotiate.restaurant.Cuisine.class ;
    $less = Packages.fr.limsi.negotiate.restaurant.Cuisine.ITALIAN;
    $more = Packages.fr.limsi.negotiate.restaurant.Cuisine.CHINESE;
    $lastProposal = null;

    function mostPreferredCuisine() {
       return (Packages.fr.limsi.negotiate.restaurant.Cuisine.ITALIAN);
    }
    
    function leastPreferredCuisine () {   
       		return (Packages.fr.limsi.negotiate.restaurant.Cuisine.ITALIAN);  		
    }
    
    function getLastUserPref() { 
    	if (getLastUserStatement() !=null)
    		return (getLastUserStatement().getStatedPreference());
    	
    	else 
    		return null;
    }
    
    function getLastUserStatement(){
		return $negotiation.context.getLastUserStatement();
	}
	
	 function getLastAgentStatement(){
		return $negotiation.context.getLastAgentStatement();
	}
	
	 function reactUser(){
    	return($negotiation.reactUserStatement());
    }
 
 	function lastOpenProposal(){
	
		return $lastProposal;
	}
	
	function updateProposal(proposal){
		$lastProposal = proposal;
	}
    
    function getPreference(criterion){
		return ($negotiation.getRandomPreference(criterion));
	}
	
	function sameStatement(){
		if (getLastUserStatement() == null ||  getLastAgentStatement () == null)
			return false;		
		return(getLastAgentStatement().equals(getLastUserStatement()));
	}

	function askUserPref(criterion){
		return ($negotiation.askUserPreference(criterion));
	}
	
	function createCriterionProposal(criterion, who) {
			if (criterion == null)
				return null;
			else 		
				return $negotiation.criterionProposal(criterion.getMore(), who);
	}

	function createOptionProposal(option, who) {
		return $negotiation.optionProposal(option, who);
	}
	
	function getDiscussedCriterion(){
		return $negotiation.context.getDiscussedCriterion();
	}
		
	function lastRejectedProposal (){
	
	}
	
	function lastOpenProposal (){
	
	}
	
	function lastAcceptedCriterion(){
	
	}
	
	
      
  </t:script>
  
</model>
