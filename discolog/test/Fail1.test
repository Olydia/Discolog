    # Apr 7, 2014 2:47:18 PM - TaskEngine 1.6 / Disco 1.8
    Welcome to Disco! (Type 'help' for command list)
  > load models/Example.xml
#
# Restrict agent to performing only a single primitive action
# on each turn
#
  > eval $disco.getInteraction().getSystem().setMax(1)
    # Returned 'null'
  > task A
    User says "Let's achieve A."
    Agent says "Ok."
  > next
    Agent says "Ok."
  > status
#
# Agent has nothing to do because precondition P of B is false

[Achieve A] -accepted <-focus
   User says "Let's achieve A."
   Agent says "Ok."
   Agent says "Ok."
   [Execute B]
   [Execute C]

  > eval P = true;
    # Returned 'true'
  > next
    Agent execute B.
    Agent says "Ok."
#
# Note effect Q of B is set by grounding script
#
  > eval Q
    # Returned 'true'
  > next
    Agent execute C.
    Agent says "Ok."
  > status

[Achieve A] -accepted -done <-focus
   User says "Let's achieve A."
   Agent says "Ok."
   Agent says "Ok."
   Agent execute B.
   Agent says "Ok."
   Agent execute C.
   Agent says "Ok."

#
# reset world state (except P)
#
  > eval Q = R = false;
    # Returned 'false'
  > task A
    User says "Let's achieve A."
    Agent execute B.
    Agent says "Ok."
  > status

[Achieve A] -accepted -live <-focus
   User says "Let's achieve A."
   Agent execute B.
   Agent says "Ok."
   [Execute C] -live

# Q becomes false due to outside force causing plan to block
#
  > eval Q = false;
    # Returned 'false'
  > next
    Agent says "Ok."
  > status

[Achieve A] -accepted -live <-focus
   User says "Let's achieve A."
   Agent execute B.
   Agent says "Ok."
   Agent says "Ok."
   [Execute C]

#
# Repair plan by adding step to re-achieve Q
#
   eval p = Packages.fr.limsi.discolog.InTable.Methodwitharguments
  > eval $disco.getFocus().add(new edu.wpi.cetask.Plan($disco.getTaskClass("B").newInstance()))
    # Returned 'null'
  > status

[Achieve A] -accepted -live <-focus
   User says "Let's achieve A."
   Agent execute B.
   Agent says "Ok."
   Agent says "Ok."
   [Execute B] -live
   [Execute C]

  > next
    Agent execute B.
    Agent says "Ok."
  > next
    Agent execute C.
    Agent says "Ok."
  > status

[Achieve A] -accepted -done <-focus
   User says "Let's achieve A."
   Agent execute B.
   Agent says "Ok."
   Agent says "Ok."
   Agent execute B.
   Agent says "Ok."
   Agent execute C.
   Agent says "Ok."

  > quit
